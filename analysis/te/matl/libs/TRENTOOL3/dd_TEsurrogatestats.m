function TEsurrotest=dd_TEsurrogatestats(cfg,data,shuffle_n)
% TESURROGATESTATS: This function calculates the transfer entropy values
% An example script (Michael Lindner, Raul Vicente, Michael Wibral, 2009)
% was modified to generate a version of a surrogate test suitable for 
% single-trial stats. The idea is to be able to look for a learning curve. 
% Dobri Dotov, C3, UNAM

%% Remember the working directory
working_directory1 = pwd;

%% check if TEprepare was performed
if ~isfield(data, 'TEprepare')
    fprintf('\n')
    error('TRENTOOL ERROR: The function TEprepare must be performed on the data, see help!');
end

%% define logging levels
LOG_INFO_MAJOR = 1;
LOG_INFO_MINOR = 2;
verbosity = data.TEprepare.cfg.verbosity;

%% check data
% -------------------------------------------------------------------------
TEconsoleoutput(verbosity, 'Checking data and config', LOG_INFO_MINOR);

% check data using checkdata from Fieldtrip
[data] = ft_checkdata(data, 'datatype','raw');

% check the data structure
if ~isfield(data, 'trial')
    fprintf('\n')
    error('TRENTOOL ERROR: data must be in ''.trial''-structure, see help!');
end
if ~isfield(data, 'time')
    fprintf('\n')
    error('TRENTOOL ERROR: data contains no ''.time''-structure, see help!');
end
if ~isfield(data, 'label')
    fprintf('\n')
    error('TRENTOOL ERROR: data contains no ''.label''-structure, see help!');
end
if ~isfield(data, 'fsample')
    fprintf('\n')
    error('TRENTOOL ERROR: data contains no ''.fsample''-structure, see help!');
end
if size(data.time,1)>size(data.time,2)
    data.time=data.time';
end

% compare new cfg and cfg from TEprepare if equal fields exist
% -------------------------------------------------------------------------

doublefields = 0;
cfgTEprepare = data.TEprepare.cfg;

cfgfields = fieldnames(cfgTEprepare);
cfgfields2 = fieldnames(cfg);

for ii = 1:size(cfgfields,1)
    for jj = 1:size(cfgfields2,1)
        if strcmp(cfgfields{ii},cfgfields2{jj})
            doublefields = doublefields + 1;
            disp('---- The following field is being overwritten:')
            disp(cfgfields{ii})
        end
    end
end

clear cfgTEprepare

if doublefields  > 0
    fprintf('\n')
    error('TRENTOOL ERROR: Illegal attempt to overwrite entry generated by or used for TEprepare! Change cfg or rerun TEprepare. (see help)')
end


% add structures and values of data.TEprepare.cfg to cfg
names1 = fieldnames(data.TEprepare.cfg);
nr1 = size(names1,1);
for ii = 1:nr1
    eval(strcat('cfg.',names1{ii},' = getfield(data.TEprepare.cfg, {1}, names1{ii});'))
end


% check configuration and set defaults
% -------------------------------------------------------------------------

% if not defined set defaults
if ~isfield(cfg, 'fileidout')
    fprintf('\n')
    error('TRENTOOL ERROR: cfg.fileidout must be defined, see help!');
end


% check optimizemethod
if ~isfield(cfg, 'optdimusage')
    fprintf('\n')
    error('TRENTOOL ERROR: cfg.optdimusage is not defined, see help!')
else
    if strcmp(cfg.optdimusage, 'maxdim') == 0 && strcmp(cfg.optdimusage, 'indivdim') == 0
        fprintf('\n')
        error(['TRENTOOL ERROR: ',cfg.optdimusage,' is a wrong input for cfg.optdimusage , see help!'])
    end
end

% check dim
if ~isfield(cfg, 'dim')
    if strcmp(cfg.optdimusage, 'indivdim')
        cfg.dim = data.TEprepare.optdimmat;
        %         cfg.optdimusage = cfg.optdimusage;
    else
        cfg.dim(1:size(data.TEprepare.optdimmat,1),1) = data.TEprepare.optdim;
        %         cfg.optdimusage = cfg.optdimusage;
    end
else
    if strcmp(cfg.optdimusage, 'indivdim')
        if size(cfg.dim,1) ~= size(data.TEprepare.channelcombi,1)
            fprintf('\n')
            error('TRENTOOL ERROR: cfg.dim has to be in that size: (channelcombi x 1), see help!')
        elseif size(cfg.dim,2)>1
            fprintf('\n')
            error('TRENTOOL ERROR: cfg.dim has to be in that size: (channelcombi x 1), see help!')
        end
    else
        if size(cfg.dim,1)>1 && size(cfg.dim,2)>1
            fprintf('\n')
            error('TRENTOOL ERROR: cfg.dim must include a scalar, see help!');
        end
        if cfg.dim < data.TEprepare.optdim
            warning(['\nTRENTOOL WARNING: embedding dimension ' ...
                'specified in cfg.dim (=%d) is smaller than the optimal ' ...
                'dimension found by TEprepare (%d).'], ...
                cfg.dim, data.TEprepare.optdim)
        elseif cfg.dim > data.TEprepare.optdim
            warning(['\nTRENTOOL WARNING: embedding dimension ' ...
                'specified in cfg.dim (=%d) is bigger than the optimal ' ...
                'dimension found by TEprepare (%d).'], ...
                cfg.dim, data.TEprepare.optdim)
        end
    end
end


% check tau
if ~isfield(cfg, 'tau')
    if strcmp(data.TEprepare.cfg.optimizemethod, 'ragwitz')
        if strcmp(cfg.optdimusage, 'indivdim')
            cfg.tau = data.TEprepare.opttaumat;
        else
            cfg.tau(1:size(data.TEprepare.channelcombi,1)) = data.TEprepare.opttau;
        end
    elseif strcmp(data.TEprepare.cfg.optimizemethod, 'cao')
        cfg.tau(1:size(data.TEprepare.channelcombi,1)) = data.TEprepare.cfg.caotau;
    end
    
else
    if strcmp(cfg.optdimusage, 'indivdim') && strcmp(data.TEprepare.cfg.optimizemethod, 'ragwitz')
        if size(cfg.tau,1) ~= size(data.TEprepare.channelcombi,1)
            fprintf('\n')
            error('TRENTOOL ERROR: cfg.tau has to be in that size: (channelconmbi x 1), see help!')
        elseif size(cfg.tau,2)>1
            fprintf('\n')
            error('TRENTOOL ERROR: cfg.tau has to be in that size: (channelconmbi x 1), see help!')
        end
    else
        if size(cfg.tau,1)>1 && size(cfg.tau,2)>1
            fprintf('\n')
            error('TRENTOOL ERROR: cfg.tau must include a scalar, see help!');
        end
    end
    
end


% check TE parameter
if isempty(cfg.predicttime_u)
    error('TRENTOOL ERROR: specify cfg.predicttime_u, see help!');
elseif length(cfg.predicttime_u) == 1
    cfg.predicttime_u = repmat(cfg.predicttime_u, size(data.TEprepare.channelcombi,1), 1);
elseif length(cfg.predicttime_u) ~= size(data.TEprepare.channelcombi,1)
    error('TRENTOOL ERROR: cfg.predicttime_u should either be a scalar or a vector of size [n channel combinations X 1], see help!');
end

if ~isfield(cfg, 'kth_neighbors'),  cfg.kth_neighbors = 4;  end

if ~isfield(cfg, 'TheilerT'),       cfg.TheilerT = 'ACT';   end
if ~strcmp(cfg.TheilerT, 'ACT')
    if size(cfg.TheilerT,1)>1 || size(cfg.TheilerT,2)>1
        fprintf('\n')
        error('TRENTOOL ERROR: cfg.TheilerT must include a scalar, see help!');
    end
end


% check the format of input vectors
if size(cfg.toi,1)>size(cfg.toi,2)
    cfg.toi=cfg.toi';
elseif size(cfg.predicttime_u,1)>size(cfg.predicttime_u,2)
    cfg.predicttime_u=cfg.predicttime_u';
elseif size(cfg.kth_neighbors,1)>1 || size(cfg.kth_neighbors,2)>1
    fprintf('\n')
    error('TRENTOOL ERROR: cfg.dim must include a scalar, see help!');
end


%% start calculating TE
% -------------------------------------------------------------------------
warning('off','all')  % otherwise parfor loops throw warnings
cfg.calctime = 'yes'; % to help get expected running time. but not used :o

% for unshuffled data
% ----------------------
msg = 'Calculating transfer entropy for unshuffled data';
TEconsoleoutput(cfg.verbosity, msg, LOG_INFO_MINOR);
cfg.shuffle = 'no';
[TEresult] = transferentropy(cfg,data);
TEresult.TEprepare = data.TEprepare;
TEsurrotest = TEresult;

cfg.calctime = 'no';


% for shuffled data
% ----------------------
if shuffle_n>0
    TEmat_sur = zeros(size(data.TEprepare.nrtrials,1),size(TEresult.TEmat,2),shuffle_n);
    msg = 'Calculating transfer entropy for shuffled data';
    TEconsoleoutput(cfg.verbosity, msg, LOG_INFO_MINOR);
    cfg.shuffle = 'yes';
    for sn=1:shuffle_n
        TEshuffle = transferentropy_dd(cfg,data);
        TEmat_sur(:,:,sn)=TEshuffle.TEmat;
    end
    cfg = rmfield(cfg, 'shuffle');
    TEsurrotest.TEmat_shuffle = TEmat_sur;
end

cfg = rmfield(cfg, 'calctime');

warning('on','all')

TEsurrotest.cfg = cfg;
TEsurrotest.ACT.actvalue = data.TEprepare.ACT;
TEsurrotest.sgncmb = TEresult.sgncmb;
TEsurrotest.TEprepare = data.TEprepare;
TEsurrotest.TEmat = TEresult.TEmat;
TEsurrotest.MImat = TEresult.MImat;

%% Returning to the working directory
cd(working_directory1)

return