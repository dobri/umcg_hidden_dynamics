geom_jitter(size=1., alpha=1., width=.0, height=.0) +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=.7) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#000000",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = "Sync")
if ((dv %% 2) == 1){
g[[counter]] <- g[[counter]] + scale_y_continuous(limits=c(.4, 2.6))
} else {
g[[counter]] <- g[[counter]] + scale_y_continuous(limits=c(-.0, .9))
}
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=6,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',4)
counter = 0
for (dv in c(5,6,7,8)){
x$dv<-x[,dv]
# x$iv<-x$cmax
x$iv<-x$score
if (names(x)[dv]=='LyapsTutor') {dv_lab = 'Max-Lyapunov-short-Tutor'}
if (names(x)[dv]=='LyaplTutor') {dv_lab = 'Max-Lyapunov-long-Tutor'}
if (names(x)[dv]=='LyapsTrainee') {dv_lab = 'Max-Lyapunov-short-Trainee'}
if (names(x)[dv]=='LyaplTrainee') {dv_lab = 'Max-Lyapunov-long-Trainee'}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
if (dv==5) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==6) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==7) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==8) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=1., width=.0, height=.0) +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=.7) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#000000",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = "Sync")
if ((dv %% 2) == 1){
g[[counter]] <- g[[counter]] + scale_y_continuous(limits=c(.3, 2.6))
} else {
g[[counter]] <- g[[counter]] + scale_y_continuous(limits=c(-.0, .9))
}
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=6,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',4)
counter = 0
for (dv in c(5,6,7,8)){
x$dv<-x[,dv]
# x$iv<-x$cmax
x$iv<-x$score
if (names(x)[dv]=='LyapsTutor') {dv_lab = 'Max-Lyapunov-short-Tutor'}
if (names(x)[dv]=='LyaplTutor') {dv_lab = 'Max-Lyapunov-long-Tutor'}
if (names(x)[dv]=='LyapsTrainee') {dv_lab = 'Max-Lyapunov-short-Trainee'}
if (names(x)[dv]=='LyaplTrainee') {dv_lab = 'Max-Lyapunov-long-Trainee'}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
if (dv==5) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==6) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==7) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==8) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=.8, width=.0, height=.0) +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#000000",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = "Sync")
if ((dv %% 2) == 1){
g[[counter]] <- g[[counter]] + scale_y_continuous(limits=c(.3, 2.6))
} else {
g[[counter]] <- g[[counter]] + scale_y_continuous(limits=c(-.0, .9))
}
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=6,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',4)
counter = 0
for (dv in c(5,6,7,8)){
x$dv<-x[,dv]
# x$iv<-x$cmax
x$iv<-x$score
if (names(x)[dv]=='LyapsTutor') {dv_lab = 'Max-Lyapunov-short-Tutor'}
if (names(x)[dv]=='LyaplTutor') {dv_lab = 'Max-Lyapunov-long-Tutor'}
if (names(x)[dv]=='LyapsTrainee') {dv_lab = 'Max-Lyapunov-short-Trainee'}
if (names(x)[dv]=='LyaplTrainee') {dv_lab = 'Max-Lyapunov-long-Trainee'}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
if (dv==5) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==6) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==7) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
if (dv==8) {x$fitted <- getME(m4,'X') %*% fixef(m4)}
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=.8, width=.0, height=.0) +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#000000",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = "Sync")
# if ((dv %% 2) == 1){
#   g[[counter]] <- g[[counter]] + scale_y_continuous(limits=c(.3, 2.6))
# } else {
#   g[[counter]] <- g[[counter]] + scale_y_continuous(limits=c(-.0, .9))
# }
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=6,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
filename=paste("lyap_vs_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=6,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTrainee') {dv_lab = 'Max-Lyapunov-short-Trainee'; iv_lab = 'Max-Lyapunov-short-Tutor'}
if (names(x)[dv]=='LyaplTrainee') {dv_lab = 'Max-Lyapunov-long-Trainee'; iv_lab = 'Max-Lyapunov-long-Tutor'}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=.8, width=.0, height=.0) +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#000000",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTrainee') {
dv_lab = 'Max-Lyapunov-short-Trainee'
iv_lab = 'Max-Lyapunov-short-Tutor'
}
if (names(x)[dv]=='LyaplTrainee') {
dv_lab = 'Max-Lyapunov-long-Trainee'
iv_lab = 'Max-Lyapunov-long-Tutor'
}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=.8, width=.0, height=.0) +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#000000",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_vs_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=6,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
iv_lab
names(x)[dv]
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTutor') {
dv_lab = 'Max-Lyapunov-short-Trainee'
iv_lab = 'Max-Lyapunov-short-Tutor'
}
if (names(x)[dv]=='LyaplTutor') {
dv_lab = 'Max-Lyapunov-long-Trainee'
iv_lab = 'Max-Lyapunov-long-Tutor'
}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=.8, width=.0, height=.0) +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#000000",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_vs_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=6,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTutor') {
dv_lab = 'Max-Lyapunov-short-Trainee'
iv_lab = 'Max-Lyapunov-short-Tutor'
}
if (names(x)[dv]=='LyaplTutor') {
dv_lab = 'Max-Lyapunov-long-Trainee'
iv_lab = 'Max-Lyapunov-long-Tutor'
}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=.8, width=.0, height=.0) +
geom_line(aes(x=iv, y=iv), col='grey', size=1., alpha=.7) +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#000000",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_vs_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=6,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTutor') {
dv_lab = 'Max-Lyapunov-short-Trainee'
iv_lab = 'Max-Lyapunov-short-Tutor'
}
if (names(x)[dv]=='LyaplTutor') {
dv_lab = 'Max-Lyapunov-long-Trainee'
iv_lab = 'Max-Lyapunov-long-Tutor'
}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=.8, width=.0, height=.0) +
geom_line(aes(x=iv, y=iv), col='grey', size=1., alpha=.7, linetype = "longdash") +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#111111",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_vs_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=4,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTutor') {
dv_lab = 'Max-Lyapunov-short-Trainee'
iv_lab = 'Max-Lyapunov-short-Tutor'
}
if (names(x)[dv]=='LyaplTutor') {
dv_lab = 'Max-Lyapunov-long-Trainee'
iv_lab = 'Max-Lyapunov-long-Tutor'
}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=2., alpha=.8, width=.0, height=.0) +
geom_line(aes(x=iv, y=iv), col='grey', size=1., alpha=.7, linetype = "longdash") +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#111111",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_vs_scores_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=4,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
filename=paste("lyap_vs_lyap_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=4,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTutor') {
dv_lab = 'Max-Lyapunov-short-Trainee'
iv_lab = 'Max-Lyapunov-short-Tutor'
}
if (names(x)[dv]=='LyaplTutor') {
dv_lab = 'Max-Lyapunov-long-Trainee'
iv_lab = 'Max-Lyapunov-long-Tutor'
}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1.5, alpha=1., width=.0, height=.0) +
geom_line(aes(x=iv, y=iv), col='grey', size=1., alpha=.7, linetype = "longdash") +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#111111",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
if (FALSE){
filename=paste("lyap_vs_lyap_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=4,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
}
setwd('~/logos/c3/umcg_hidden_dynamics/matlyap/')
x<-read.csv('scores_lyapunov-14-Oct-2020.csv',sep=',')
summary(x)
x$pp<-factor(x$pp)
# Name the conditions
trial_counter = 0
for (n in seq(1,dim(x)[1])) {
if (x$condition[n]==25) x$task[n]='coupled_unstable'
if (x$condition[n]==30) x$task[n]='uncoupl_unstable'
if (x$condition[n]==10) x$task[n]='uncoupl_periodic'
}
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTutor') {
dv_lab = 'Max-Lyapunov-short-Trainee'
iv_lab = 'Max-Lyapunov-short-Tutor'
}
if (names(x)[dv]=='LyaplTutor') {
dv_lab = 'Max-Lyapunov-long-Trainee'
iv_lab = 'Max-Lyapunov-long-Tutor'
}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1.5, alpha=1., width=.0, height=.0) +
geom_line(aes(x=iv, y=iv), col='grey', size=1., alpha=.7, linetype = "longdash") +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#111111",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
filename=paste("lyap_vs_lyap_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=4,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
colors<-ghibli_palette("LaputaMedium",7,type=("continuous"))[c(6,3,7)]
colors[3]<-ghibli_palette("MononokeMedium",7,type=("continuous"))[6]
g<-list('vector',2)
counter = 0
for (dv in c(5,6)){
x$iv<-x[,dv]
x$dv<-x[,dv+2]
if (names(x)[dv]=='LyapsTutor') {
dv_lab = 'Max-Lyapunov-short-Trainee'
iv_lab = 'Max-Lyapunov-short-Tutor'
}
if (names(x)[dv]=='LyaplTutor') {
dv_lab = 'Max-Lyapunov-long-Trainee'
iv_lab = 'Max-Lyapunov-long-Tutor'
}
m1=lmer(dv ~ 1 + (1|pp),data=x,REML=0)
m2=lmer(dv ~ 1 + iv + (1|pp),data=x,REML=0)
m3=lmer(dv ~ 1 + iv+task + (1|pp),data=x,REML=0)
m4=lmer(dv ~ 1 + iv*task + (1|pp),data=x,REML=0)
x$fitted <- getME(m4,'X') %*% fixef(m4)
counter = counter + 1
g[[counter]] <- ggplot(data=x, aes(x=iv, y=dv, colour=as.factor(task))) +
geom_jitter(size=1., alpha=.9, width=.0, height=.0) +
geom_line(aes(x=iv, y=iv), col='grey', size=1., alpha=.7, linetype = "longdash") +
geom_line(aes(x=iv, y=fitted, colour=task), size=2, alpha=1.) +
theme_classic() +
theme(panel.background = element_rect(fill = "#000000",
colour = "#111111",size = 1, linetype = "solid")) +
theme(legend.position="top",legend.title=element_blank()) +
labs(y = dv_lab) +
labs(x = iv_lab)
g[[counter]] <- g[[counter]] + scale_colour_manual(values=colors)
}
multiplot(plotlist=g,cols=2)
filename=paste("lyap_vs_lyap_training_with_lin_model",'_',Sys.Date(),'.png',sep='')
png(filename=filename,width=8,height=4,units="in",res=300)
multiplot(plotlist=g,cols=2)
dev.off()
